package YangTalkback.Act;

import java.net.Socket;
import java.util.Date;
import java.util.List;
import java.util.Random;

import com.google.gson.reflect.TypeToken;

import AXLib.Model.KeyValue;
import AXLib.Model.RefObject;
import AXLib.Utility.*;
import AXLib.Utility.Ex.FunEx;
import AXLib.Utility.Ex.StringEx;

import YangTalkback.Act.R;
import YangTalkback.App.App;
import YangTalkback.App.AppConfig;
import YangTalkback.Base.*;
import YangTalkback.Base.Prompt.AlertDialogManage;
import YangTalkback.Base.Prompt.PromptButton;
import YangTalkback.Comm.CLLog;
import YangTalkback.Comm.ClosureCase;
import YangTalkback.Comm.IDModel;
import YangTalkback.Comm.IDUseType;
import YangTalkback.Comm.TalkStatus;
import YangTalkback.Cpt.cptDDLEx;
import YangTalkback.Cpt.cptIDItem;
import YangTalkback.Cpt.cptMenu;
import YangTalkback.Cpt.GenGridView.ActGenDataViewActivity1;
import YangTalkback.Cpt.GenGridView.ActGetDataViewActivity;
import YangTalkback.Cpt.GenGridView.GenGridViewAdapter;
import YangTalkback.Cpt.GenGridView.GenGridViewDataSource;
import YangTalkback.Cpt.UIAdapter.GridAdapter;
import YangTalkback.Cpt.UIAdapter.IDataSource;
import YangTalkback.Cpt.UIAdapter.BaseAdapterEx.IItemViewCreater;
import YangTalkback.Net.ClientConnection;
import YangTalkback.Net.Model.AudioFileModel;
import YangTalkback.Net.Model.TalkbackChannelInfo;
import YangTalkback.Protocol.*;
import android.content.Intent;
import android.os.*;
import android.renderscript.Type;
import android.view.*;
import android.widget.*;

@AutoRefView(id = R.layout.act_main, layout = 0x03)
public class actMain extends ActGenDataViewActivity1<IDModel> {

	@AutoRefView(id = R.act_main.cptMenu)
	public cptMenu cptMenu = new cptMenu(this);
	@AutoRefView(id = R.act_main.ddlChannel)
	public Spinner ddlChannel;
	public cptDDLEx<String> cptDDL = null;
	@AutoRefView(id = R.act_main.btJoin, click = "btJoin_Click")
	public Button btJoin;// 退出按钮
	@AutoRefView(id = R.act_main.gvGrid)
	public GridView gvGrid;// 显示号码列表

	private ListEx<IDModel> _SysIDList = new ListEx<IDModel>();// 保存系统的号码列表
	public ListEx<Short> SelIDList = new ListEx<Short>();

	private boolean _isTalkbackReqing = false;
	private boolean _isFirstDDLSel = false;// 弹出下拉第一次不知为什么会触发选择事件，这里用一个字段来标识是否第一次

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
	}

	public void onScreenReady() {
		if (_connection == null) {
			AlertAndExit("网络连接异常！");
		}
		InitControls();

	}

	public void InitControls() {
		cptMenu.ExecutionEvent.add(this, "cptMenu_ExecutionEvent");
		cptMenu.SetActiveMenu("Main");
		cptDDL = new cptDDLEx<String>(this, ddlChannel);
		cptDDL.Selected.add(this, "cptDDl_Selected");
		this.CallByNewThread("LoadAllID");// 启用新线程调用方法
	}

	// 加载所有号码
	public void LoadAllID() {
		if (_connection != null && _connection.getIsLogined()) {
			_SysIDList = _connection.GetAllID();// 获取所有号码
			_SysIDList = _SysIDList.Where(new Predicate<IDModel>() {
				public boolean Test(IDModel obj) {
					return obj.ID != _connection.ID;
				}
			});
			InitGridViewActivity(gvGrid, 3, R.layout.item_idinfo, -1, Tools.DensityUtil.dip2px(this, 50));
			RefreshThread();
		}
	}

	public void RefreshThread() {
		ThreadEx.sleep(1000 * 5);
		while (!this.IsFinished && !this.isFinishing()) {

			if (_connection != null && _connection.getIsLogined() && App.LastAct == this) {
				ListEx<IDModel> list = _connection.GetAllID();// 获取所有号码
				if (list != null) {
					list = list.Where(new Predicate<IDModel>() {
						public boolean Test(IDModel obj) {
							return obj.ID != _connection.ID;
						}
					});
					_SysIDList = list;
					Reflash();
				}
			}

			ThreadEx.sleep(1000 * 5);
		}
	}

	public void LoadMyChannel() {

		try {
			OpenLoading("正在获取对讲信息", false, null);
			if (_connection != null && _connection.getIsLogined()) {
				PBCmdC pbc = new PBCmdC(_connection.ID, PBCmdC.CMD_Type_TALK_MyChannel, "");
				PBCmdR pbr = _connection.CmdC(pbc);
				if (pbr != null && pbr.Result) {
					java.lang.reflect.Type token = (new TypeToken<ListEx<TalkbackChannelInfo>>() {
					}).getType();
					ListEx<TalkbackChannelInfo> list = JSONHelper.forJSON(pbr.JSON, token);
					if (list.size() == 0) {
						Alert("当前没有您参与的对讲");
						return;
					}
					if (list.size() == 1) {
						startActivity(actTalkback.class, list.get(0).Key);
						return;
					}
					final ListEx<KeyValue<String, String>> tab = list.Select(new ISelect<TalkbackChannelInfo, KeyValue<String, String>>() {
						public KeyValue<String, String> Select(TalkbackChannelInfo t) {
							return new KeyValue<String, String>(t.Key, "参加成员：" + StringEx.ConstituteString(t.OriginalIDList));
						}
					});
					post(new ICallback() {
						@Override
						public void invoke() {
							// 这里要做弹出选择的，先使用默认最后一个的方式
							startActivity(actTalkback.class, tab.get(tab.size() - 1).Key);
							return;
							// _isFirstDDLSel = true;
							// tab.insertElementAt(new KeyValue<String,
							// String>(t.Key, "参加成员：" +
							// StringEx.ConstituteString(t.OriginalIDList)), 0);
							// cptDDL.setSource(tab);
							// cptDDL.Open();
						}
					});

				}
			}
		} catch (Exception e) {
			CLLog.Error(e);
			OpenLoading("获取对讲信息失败", false, null);
		} finally {
			CloseLoading();
		}
	}

	@Override
	public boolean OnKeyDown_Back() {
		Prompt("是否退出实时对讲手机客户端？", PromptButton.NO, new IAction<Prompt.PromptButton>() {
			@Override
			public void invoke(PromptButton obj) {
				if (obj == PromptButton.YES) {
					App.exit();
				}
			}
		});
		return false;
	}

	// 获取数据项
	public ListEx<IDModel> getData(int index) {
		if (index == 1)
			return _SysIDList;
		else
			return new ListEx<IDModel>();
	}

	public void cptDDl_Selected(EventArg<String> arg) {
		if (_isFirstDDLSel) {
			_isFirstDDLSel = false;
			return;
		}
		startActivity(actTalkback.class, arg.e);
	}

	public void btJoin_Click(EventArg<View> arg) {

		if (SelIDList.size() == 0) {
			Alert("请选择需要参数对讲的成员");
			return;
		}

		if (_isTalkbackReqing)
			return;
		_isTalkbackReqing = true;
		OpenLoading("正在发起对讲");
		ThreadEx.ThreadCall(new ICallback() {
			@Override
			public void invoke() {
				try {
					ListEx<Short> list = SelIDList.ToList();
					list.add(_connection.ID);
					String json = JSONHelper.toJSON(list);
					PBCmdC pbc = new PBCmdC(_connection.ID, PBCmdC.CMD_Type_TALK_Req, json);

					PBCmdR pbr = _connection.CmdC(pbc);
					if (pbr.Result) {
						String key = JSONHelper.forJSON(pbr.JSON, String.class);
						startActivity(actTalkback.class, key);
						return;
					} else {
						// 对讲通道已经存在
						if (pbr.JSON != null && pbr.Message != null && pbr.Message.contains("通道已经存在")) {
							String key = JSONHelper.forJSON(pbr.JSON, String.class);
							startActivity(actTalkback.class, key);
							return;
						} else {
							Alert("发起对讲失败", true);
						}

					}
				} catch (Exception e) {
					String stack = RuntimeExceptionEx.GetStackTraceString(e);
					Alert("发起对讲发生异常", true);
				} finally {
					CloseLoading();
					_isTalkbackReqing = false;
				}

			}
		});

	}

	public void cptMenu_ExecutionEvent(EventArg<Object> arg) {
		if (StringEx.equalsIgnoreCase(arg.e.toString(), "Talkback")) {
			CallByNewThread("LoadMyChannel");

		}
		if (StringEx.equalsIgnoreCase(arg.e.toString(), "Record")) {
			startActivity(actRecord.class);

		}
	}

	@Override
	protected ActGenDataViewActivity1.IGridViewItemViewCPT<IDModel> CreateItem(IDModel model) {
		return new cptIDItem(_act, model);
	}

	public boolean OnIDSelectChanged(boolean sel, short id) {
		if (sel) {
			if (SelIDList.size() >= 5) {
				Notice("超过最大成员数5");
				return false;
			} else {
				if (!SelIDList.contains((Object) id))
					SelIDList.add(id);
				return true;
			}
		} else {
			SelIDList.remove((Object) id);
			return true;
		}

	}

	@Override
	public void ItemExecutionEvent(EventArg<Object> arg) {
		Console.d("ItemExecutionEvent", arg.e);

	}

	// 列表中按钮点击事件
	public void ItemClickEvent(EventArg<IDModel> arg) {
		IDModel model = ((cptIDItem) arg.sender).getModel();

	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent intent) {
		if (resultCode == TimeoutReconnect) {
			Intent intent1 = new Intent();
			setResult(TimeoutReconnect, intent1);
			finish(3000);
		}
		super.onActivityResult(requestCode, resultCode, intent);

	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {

		menu.add(Menu.NONE, Menu.FIRST + 1, 1, "设置").setIcon(R.drawable.ico_setting);
		menu.add(Menu.NONE, Menu.FIRST + 2, 2, "退出").setIcon(R.drawable.ico_exit);

		return true;

	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case Menu.FIRST + 1:
			startActivity(actSetting.class);
			break;
		case Menu.FIRST + 2:
			App.exit();
			break;
		case Menu.FIRST + 3:
			// App.exit();
			break;
		default:
			break;
		}
		return true;
	}
}
