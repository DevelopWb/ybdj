package YangTalkback.Act;

import java.net.Socket;
import java.util.Date;
import java.util.List;
import java.util.Random;

import AXLib.Model.RefObject;
import AXLib.Utility.*;
import AXLib.Utility.Ex.FunEx;
import AXLib.Utility.Ex.StringEx;

import YangTalkback.App.App;
import YangTalkback.App.AppConfig;
import YangTalkback.Base.*;
import YangTalkback.Base.Prompt.AlertDialogManage;
import YangTalkback.Base.Prompt.PromptButton;
import YangTalkback.Codec.MicEncoder;
import YangTalkback.Codec.MicEncoder.MicEncoderDataReceiver;
import YangTalkback.Codec.Cfg.AudioEncodeCfg;
import YangTalkback.Comm.CLLog;
import YangTalkback.Comm.ClosureCase;
import YangTalkback.Comm.IDModel;
import YangTalkback.Comm.IDUseType;
import YangTalkback.Comm.TalkStatus;
import YangTalkback.Cpt.cptIDItem;
import YangTalkback.Cpt.itemTalkbackInfo;
import YangTalkback.Cpt.GenGridView.ActGenDataViewActivity1;
import YangTalkback.Cpt.GenGridView.ActGetDataViewActivity;
import YangTalkback.Cpt.GenGridView.GenGridViewAdapter;
import YangTalkback.Cpt.GenGridView.GenGridViewDataSource;
import YangTalkback.Cpt.UIAdapter.GridAdapter;
import YangTalkback.Cpt.UIAdapter.IDataSource;
import YangTalkback.Cpt.UIAdapter.BaseAdapterEx.IItemViewCreater;
import YangTalkback.Media.AudioPlay;
import YangTalkback.Media.MediaFrame;
import YangTalkback.Media.MediaFrame.MediaFrameCommandType;
import YangTalkback.Net.ClientConnection;
import YangTalkback.Net.Model.TalkbackChannelInfo;
import YangTalkback.Net.Model.TalkbackStatusInfo;
import YangTalkback.Protocol.*;
import android.content.Intent;
import android.os.*;
import android.view.*;
import android.widget.*;

@AutoRefView(id = R.layout.act_main1, layout = 0x00)
public class actTalkback extends ActGenDataViewActivity1<TalkbackStatusInfo> implements MicEncoderDataReceiver {

	@AutoRefView(id = R.act_main.btStart, touch = "btStart_Touch")
	public Button btStart;// 退出按钮
	@AutoRefView(id = R.act_main.gvGrid)
	public GridView gvGrid;// 显示号码列表

	private ListEx<IDModel> _SysIDList = new ListEx<IDModel>();// 保存系统的号码列表
	private ListEx<Short> _selIDList = new ListEx<Short>();
	private String _key = null;
	private boolean _isTalkbackReqing = false;
	private MicEncoder _me = null;
	private AudioPlay _ap = null;
	private boolean _isTalking = false;// 当前是否按下讲话按钮
	private boolean _isPlaying = false;// 当前是否正在接收其他人发过来的语音
	private boolean _isNeedSendMediaCommandStart = false;// 是否需要发送开始语音
	private boolean _isNeedSendMediaCommandStop = false;// 是否需要发送停止语音
	private AQueue<MediaFrame> _qPushOut = new AQueue<MediaFrame>();
	private AQueue<MediaFrame> _qPushIn = new AQueue<MediaFrame>();
	private Thread _threadPushOut = null;
	private Thread _threadPushIn = null;
	private Thread _threadRefresh = null;
	private TalkbackChannelInfo _info = null;
	private ListEx<TalkbackStatusInfo> _statusList;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

	}

	public void onScreenReady() {
		if (_connection == null) {
			AlertAndExit("网络连接异常！");
			return;
		}
		_key = GetActivityDefaultExtraValue(true);
		if (_key == null)
			return;
		_ap = new AudioPlay(0);
		_me = new MicEncoder(AudioEncodeCfg.GetDefault(), this);
		_me.start();
		_ap.Start();
		this.CallByNewThread("Enter");// 启用新线程调用方法
		_threadPushOut = this.CallByNewThread("PushOutThread");
		_threadPushIn = this.CallByNewThread("PushInThread");
	}

	// 进入对讲
	public void DoEnterTalkback(String key) {
		finish();
		super.DoEnterTalkback(key);

	}

	/** 进入对讲 */
	public void Enter() {
		try {
			OpenLoading("正在进入对讲", false, null);
			if (_connection != null && _connection.getIsLogined()) {
				PBCmdC pbc = new PBCmdC(_connection.ID, PBCmdC.CMD_Type_TALK_Enter, JSONHelper.toJSON(_key));
				PBCmdR pbr = _connection.CmdC(pbc);
				if (pbr == null)
					throw RuntimeExceptionEx.Create("_connection.CmdC(pbc)==null");
				if (!pbr.Result) {
					AlertAndOut(pbr.Message);
					return;
				}
				_SysIDList = _connection.GetAllIDByCache();// 获取所有号码
				// 获取对讲信息
				pbc = new PBCmdC(_connection.ID, PBCmdC.CMD_Type_TALK_Info, JSONHelper.toJSON(_key));
				pbr = _connection.CmdC(pbc);
				_info = JSONHelper.forJSON(pbr.JSON, TalkbackChannelInfo.class);
				// 过滤出在对讲通道的ID
				_SysIDList = _SysIDList.Where(new Predicate<IDModel>() {
					public boolean Test(IDModel obj) {
						return _info.OriginalIDList.contains((Object) obj.ID);
					}
				});
				_statusList = _SysIDList.Select(new ISelect<IDModel, TalkbackStatusInfo>() {
					public TalkbackStatusInfo Select(IDModel t) {
						TalkbackStatusInfo status = new TalkbackStatusInfo();
						status.IDModel = t;
						if (_info.ActiveIDList.contains(t.ID))
							status.JoinStatus = 1;
						else if (_info.AvailableIDList.contains(t.ID))
							status.JoinStatus = 0;
						else
							status.JoinStatus = -1;

						return status;
					}
				});

				InitGridViewActivity(gvGrid, 2, R.layout.item_talkback_info);
				_threadRefresh = CallByNewThread("RefreshThread");
			}
		} catch (Exception e) {
			String stack = RuntimeExceptionEx.GetStackTraceString(e);
			CLLog.Error(e);
			AlertAndOut("进入对讲失败");
		} finally {
			CloseLoading();
		}
	}

	public void RefreshThread() {
		while (!this.IsFinished && !this.isFinishing() && _connection.getIsConnected()) {
			try {
				PBCmdC pbc = new PBCmdC(_connection.ID, PBCmdC.CMD_Type_TALK_Info, JSONHelper.toJSON(_key));
				PBCmdR pbr = _connection.CmdC(pbc);
				_info = JSONHelper.forJSON(pbr.JSON, TalkbackChannelInfo.class);
				// 过滤出在对讲通道的ID
				_SysIDList = _SysIDList.Where(new Predicate<IDModel>() {
					public boolean Test(IDModel obj) {
						return _info.OriginalIDList.contains((Object) obj.ID);
					}
				});
				_statusList = _SysIDList.Select(new ISelect<IDModel, TalkbackStatusInfo>() {
					public TalkbackStatusInfo Select(IDModel t) {
						TalkbackStatusInfo status = new TalkbackStatusInfo();
						status.IDModel = t;
						if (_info.ActiveIDList.contains(t.ID))
							status.JoinStatus = 1;
						else if (_info.AvailableIDList.contains(t.ID))
							status.JoinStatus = 0;
						else
							status.JoinStatus = -1;
						return status;
					}
				});
				Reflash();

			} catch (Exception e) {

			}
			ThreadEx.sleep(3000);
		}
	}

	/** 退出对讲 */
	public void Leave() {
		try {
			OpenLoading("正在退出对讲", false, null);
			if (_connection != null && _connection.getIsLogined()) {
				PBCmdC pbc = new PBCmdC(_connection.ID, PBCmdC.CMD_Type_TALK_Leave, JSONHelper.toJSON(_key));
				PBCmdR pbr = _connection.CmdC(pbc);
			}
		} catch (Exception e) {

		} finally {
			CloseLoading();
		}
	}

	@Override
	public boolean OnKeyDown_Back() {
		return false;
	}

	@Override
	public void finish() {
		_me.stop();
		_ap.Stop();
		_me = null;
		_ap = null;
		ThreadEx.stop(_threadPushOut);
		ThreadEx.stop(_threadPushIn);
		ThreadEx.stop(_threadRefresh);
		_threadPushOut = null;
		_threadPushIn = null;
		_threadRefresh = null;
		super.finish();
	}

	// 获取数据项
	public ListEx<TalkbackStatusInfo> getData(int index) {
		if (index == 1)
			return _statusList;
		else
			return new ListEx<TalkbackStatusInfo>();
	}

	public void btStart_Touch(EventArg<MotionEvent> arg) {
		if (_isPlaying)
			return;
		if (arg.e.getAction() == MotionEvent.ACTION_DOWN) {
			_isTalking = true;
			_isNeedSendMediaCommandStart = true;
		} else if (arg.e.getAction() == MotionEvent.ACTION_UP) {
			_isTalking = false;
			_isNeedSendMediaCommandStop = true;
		}
	}

	@Override
	protected ActGenDataViewActivity1.IGridViewItemViewCPT<TalkbackStatusInfo> CreateItem(TalkbackStatusInfo model) {
		return new itemTalkbackInfo(_act, model);
	}

	// 列表中按钮点击事件
	public void ItemClickEvent(EventArg<TalkbackStatusInfo> arg) {

	}

	public void SwitchTalkbackStatus() {
		post(new ICallback() {
			public void invoke() {
				btStart.setEnabled(!_isPlaying);
			}
		});
	}

	public void MediaPushIn(PBMedia pb) {
		_qPushIn.Enqueue(pb.Frame);
	}

	@Override
	public void Received(MediaFrame frame) {

		if (_isTalking)
			_qPushOut.Enqueue(frame);

	}

	public void PushOutThread() {
		while (!this.IsFinished && !this.isFinishing() && _connection.getIsConnected()) {
			PBMedia pb = null;
			if (_isNeedSendMediaCommandStart) {
				pb = new PBMedia(_connection.ID, (short) 0, MediaFrame.CreateCommandMediaFrame(true, MediaFrame.MediaFrameCommandType.Start));
				_connection.PushMedia(pb);
				_isNeedSendMediaCommandStart = false;
			}
			if (_qPushOut.size() > 0) {

				MediaFrame frame = _qPushOut.Dequeue();
				pb = new PBMedia(_connection.ID, (short) 0, frame);
				_connection.PushMedia(pb);

			} else {
				ThreadEx.sleep(10);
			}
			if (_isNeedSendMediaCommandStop) {
				pb = new PBMedia(_connection.ID, (short) 0, MediaFrame.CreateCommandMediaFrame(true, MediaFrame.MediaFrameCommandType.Stop));
				_connection.PushMedia(pb);
				_isNeedSendMediaCommandStop = false;
			}
		}
	}

	public void PushInThread() {
		while (!this.IsFinished && !this.isFinishing() && _connection.getIsConnected()) {
			if (!_isTalking && _qPushIn.size() > 0) {
				MediaFrame mf = _qPushIn.Dequeue();
				if (mf.IsCommandFrame()) {
					MediaFrameCommandType ct = mf.GetCommandType();
					if (ct == MediaFrameCommandType.Start) {
						_isPlaying = true;
						SwitchTalkbackStatus();
					} else if (ct == MediaFrameCommandType.Stop) {
						_isPlaying = false;
						SwitchTalkbackStatus();
					}
				} else {
					if (_isPlaying && _ap != null)
						_ap.Play(mf);

				}

			} else {
				ThreadEx.sleep(10);
			}

		}
	}
}
