package YangTalkback.Act;

import java.net.Socket;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import AXLib.Model.RefObject;
import AXLib.Utility.*;
import AXLib.Utility.Ex.FunEx;
import AXLib.Utility.Ex.StringEx;

import YangTalkback.Act.R;
import YangTalkback.App.App;
import YangTalkback.App.AppConfig;
import YangTalkback.Base.*;
import YangTalkback.Base.Prompt.AlertDialogManage;
import YangTalkback.Base.Prompt.PromptButton;
import YangTalkback.Codec.MicEncoder;
import YangTalkback.Codec.MicEncoder.MicEncoderDataReceiver;
import YangTalkback.Codec.Cfg.AudioEncodeCfg;
import YangTalkback.Comm.CLLog;
import YangTalkback.Comm.ClosureCase;
import YangTalkback.Comm.IDModel;
import YangTalkback.Comm.IDUseType;
import YangTalkback.Comm.TalkStatus;
import YangTalkback.Comm.TalkbackStatus;
import YangTalkback.Cpt.cptIDItem;
import YangTalkback.Cpt.cptMenu;
import YangTalkback.Cpt.itemTalkbackInfo;
import YangTalkback.Cpt.GenGridView.ActGenDataViewActivity1;
import YangTalkback.Cpt.GenGridView.ActGetDataViewActivity;
import YangTalkback.Cpt.GenGridView.GenGridViewAdapter;
import YangTalkback.Cpt.GenGridView.GenGridViewDataSource;
import YangTalkback.Cpt.UIAdapter.GridAdapter;
import YangTalkback.Cpt.UIAdapter.IDataSource;
import YangTalkback.Cpt.UIAdapter.BaseAdapterEx.IItemViewCreater;
import YangTalkback.Media.AudioPlay;
import YangTalkback.Media.MediaFrame;
import YangTalkback.Media.MediaFrame.MediaFrameCommandType;
import YangTalkback.Module.Ring;
import YangTalkback.Net.ClientConnection;
import YangTalkback.Net.Model.TalkbackChannelInfo;
import YangTalkback.Net.Model.TalkbackStatusInfo;
import YangTalkback.Protocol.*;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.media.AudioManager;
import android.os.*;
import android.view.*;
import android.widget.*;

public class TalkbackCaptureCtrl implements MicEncoderDataReceiver {
	private int _speekMode = 0;
	private actTalkback _act;
	private short _fromId = -1;
	private boolean _isworking = false;
	private boolean _isTwoway = false;
	private boolean _isOpenCapture = false;
	private boolean _isNeedSendMediaCommandStart = false;// 是否需要发送开始语音
	private boolean _isNeedSendMediaCommandStop = false;// 是否需要发送停止语音
	private MicEncoder _me = null;
	private AudioEncodeCfg _cfg = null;

	public TalkbackCaptureCtrl(actTalkback act, short fromId, boolean isTwoway, int speekMode) {
		_act = act;
		_fromId = fromId;
		_speekMode = speekMode;
		_isTwoway = isTwoway;
		_isOpenCapture = isTwoway;
	}

	public void Start() {
		if (_isworking)
			return;
		_isworking = true;
		_cfg = AudioEncodeCfg.GetDefault();
		// _cfg.samples = 640;
		// _cfg.compression = 8;

		_me = new MicEncoder(_cfg, this);
		_me.start();
	}

	public void Stop() {
		if (!_isworking)
			return;
		_isworking = false;
		_me.stop();
	}

	public void Capture(boolean isOpen) {
		_isNeedSendMediaCommandStart = isOpen;
		_isNeedSendMediaCommandStop = !isOpen;
		_isOpenCapture = isOpen;
	}

	@Override
	public void Received(MediaFrame frame) {

		if (_isOpenCapture || _isNeedSendMediaCommandStart || _isNeedSendMediaCommandStop) {
			if (_isNeedSendMediaCommandStart) {
				PBMedia pb = new PBMedia(_fromId, (short) 0, MediaFrame.CreateCommandMediaFrame(true, MediaFrame.MediaFrameCommandType.Start));
				_act.PushOut(pb);
				_isNeedSendMediaCommandStart = false;
			}
			if (_isOpenCapture) {
				PBMedia pb = new PBMedia(_fromId, (short) 0, frame);
				_act.PushOut(pb);
			}
			if (_isNeedSendMediaCommandStop) {
				PBMedia pb = new PBMedia(_fromId, (short) 0, MediaFrame.CreateCommandMediaFrame(true, MediaFrame.MediaFrameCommandType.Stop));
				_act.PushOut(pb);
				_isNeedSendMediaCommandStop = false;
			}
		}

	}
}
