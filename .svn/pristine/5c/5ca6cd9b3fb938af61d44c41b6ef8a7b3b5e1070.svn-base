package YangTalkback.Act;

import java.io.EOFException;
import java.net.Socket;
import java.net.SocketException;

import AXLib.Model.RefObject;
import AXLib.Utility.*;
import AXLib.Utility.Ex.FunEx;
import AXLib.Utility.Ex.StringEx;

import YangTalkback.App.App;
import YangTalkback.App.AppConfig;
import YangTalkback.Base.*;
import YangTalkback.Codec.CamVideoCoderProfile.CameraType;
import YangTalkback.Comm.CLLog;
import YangTalkback.Cpt.ImageButtonEx;
import YangTalkback.Net.ClientConnection;
import android.R.string;
import android.content.Intent;
import android.os.*;
import android.view.*;
import android.widget.*;

@AutoRefView(id = R.layout.act_login, layout = 0x03)
public class actLogin extends ActCLBase {
	private static boolean _D = AppConfig._D;
	private static boolean _D1 = _D && false;// 本地测试
	private boolean _tryConnecting = false;// 是否正在尝试连接
	private int _tryConnectionCount = 0;// 尝试连接次数
	private Thread _connectThread = null;// 连接服务器线程
	private Class<?> _loginGoPage = null;

	@AutoRefView(id = R.act_login.tbID)
	public EditText tbID;// 输入号码
	@AutoRefView(id = R.act_login.tbPwd)
	public EditText tbPwd;
	@AutoRefView(id = R.act_login.cbRPwd)
	public CheckBox cbRPwd;
	@AutoRefView(id = R.act_login.ibRPwd, click = "ibRPwd_Click")
	public ImageButtonEx ibRPwd;
	@AutoRefView(id = R.act_login.btSetting, click = "btSetting_Click")
	public Button btSetting;// 设置按钮
	@AutoRefView(id = R.act_login.btLogin, click = "btLogin_Click")
	public Button btLogin;// 登录按钮

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
	}

	public void onScreenReady() {
		_ac.LeaveExitApp = false;
		tbID.setText(_ac.LoginID);
		if (_ac.IsRememberPWD) {
			tbPwd.setText(_ac.LoginPWD);
			cbRPwd.setChecked(true);
			ibRPwd.setImageResource(R.drawable.ico_login_sel_active);
		}

		_loginGoPage = actMain.class;
		// _loginGoPage = actMonitor.class;
		String autorun = GetActivityDefaultExtraValue(false);
		if (_ac.IsAutorun && _ac.IsRememberPWD && StringEx.equalsIgnoreCase("Autorun", autorun)) {
			btLogin_Click(null);
		} else if (_D1) {
			tbPwd.setText("000000-00");  
			btLogin_Click(null);
		}
	}

	public void btRecordTest_Click(EventArg<View> arg) {
		// startActivity(actRecord.class);
	}

	public void btPlayTest_Click(EventArg<View> arg) {
		// startActivity(actPlay.class);
	}

	public void btRPTest_Click(EventArg<View> arg) {
		// startActivity(actCapturePlay.class);
	}

	public void btLogin_Click(EventArg<View> arg) {
		final String ip = _ac.ServerIP;
		String idStr = this.tbID.getText().toString();
		if (StringEx.isEmpty(ip) || StringEx.isEmpty(idStr)) {
			Alert("输入不正确");
			return;
		}
		_tryConnecting = true;
		ConnectServer();
	}

	public void btSetting_Click(EventArg<View> arg) {
		startActivity(actSetting.class);
	}

	public void ibRPwd_Click(EventArg<View> arg) {
		cbRPwd.setChecked(!cbRPwd.isChecked());
		ibRPwd.setImageResource(cbRPwd.isChecked() ? R.drawable.ico_login_sel_active : R.drawable.ico_login_sel_bg);
	}

	public void AlertAndExit() {
		ThreadEx.stop(_connectThread);
		ThreadEx.ThreadCall(new ICallback() {

			@Override
			public void invoke() {
				ThreadEx.sleep(200);
				CloseLoading();
				// actLogin.this.AlertAndExit("取消连接服务器，程序将退出");
			}
		});

	}

	public void ConnectServer() {
		if (!_tryConnecting)
			return;
		// loading时取消后回调处理
		final ICallback cancelCallBack = new ICallback() {
			@Override
			public void invoke() {
				_tryConnecting = false;
				AlertAndExit();
			}
		};
		OpenLoading("正在连接服务器...", true, cancelCallBack);
		final String ip = _ac.ServerIP;
		final String idStr = this.tbID.getText().toString();
		final short id = (short) Integer.parseInt(idStr);
		final String pwd = tbPwd.getText().toString();
		final StreamSocket ss = new StreamSocket();
		try {
			ss.setReceiveBufferSize(8 * 1024);
			ss.setSendBufferSize(8 * 1024);
		} catch (SocketException e) {
		}

		ThreadEx.stop(_connectThread);
		_connectThread = ThreadEx.GetThreadHandle(new ICallback() {
			@Override
			public void invoke() {

				ClientConnection cc = null;
				try {
					ss.connect(ip, AppConfig.Instance.ServerPort);// 连接服务器
				} catch (Exception ex) {
					String stack = RuntimeExceptionEx.GetStackTraceString(ex);
					if (_tryConnectionCount <= 15) {// 连接失败，尝试重连
						for (int i = 5; i >= 0; i--) {
							if (!_tryConnecting)
								return;
							OpenLoading(String.format("连接服务器失败，%d秒后自动重连。", i), true, cancelCallBack);
							ThreadEx.sleep(1000);
						}
						_tryConnectionCount++;
						OpenLoading("正在重新连接服务器...", true, cancelCallBack);
						ThreadEx.sleep(1000);
						if (_tryConnecting) {
							post(new ICallback() {// 同步到UI重新连接服务器
								public void invoke() {
									ConnectServer();
								}
							});
						}
						return;
					} else {
						AlertAndExit("未能连接服务器，请稍后再试。");
					}
				}
				_tryConnectionCount = 0;

				cc = new ClientConnection(ss);
				ThreadEx.sleep(1000);
				try {
					OpenLoading("正在登录...", true, cancelCallBack);
					RefObject<String> refObj = new RefObject<String>(null);
					if (cc.Login(id, pwd, "", true, refObj)) {

						SaveLoginInfo();
						App.SetConnection(cc);// 设置当前连接
						OpenLoading("登录成功，正在进入...", true, cancelCallBack);

						ThreadEx.sleep(1000);
						CloseLoading();
						startActivity(_loginGoPage);// 跳转页面
						return;
					} else {
						cc.Disconnect();
						cc = null;
						Alert(String.format("登录失败，%s", refObj.Value), true);
						return;
					}
				} catch (Exception ex) {
					String stack = RuntimeExceptionEx.GetStackTraceString(ex);
					if (_tryConnectionCount <= 15) {
						for (int i = 5; i >= 0; i--) {
							if (!_tryConnecting)
								return;
							OpenLoading(String.format("网络连接出现错误,%d秒后自动重连。", i), true, cancelCallBack);
							ThreadEx.sleep(1000);
						}
						_tryConnectionCount++;
						OpenLoading("正在重新连接服务器...", true, cancelCallBack);
						ThreadEx.sleep(1000);
						if (_tryConnecting) {
							post(new ICallback() {
								public void invoke() {
									ConnectServer();
								}
							});
						}
						return;
					} else {
						AlertAndExit("网络错误，请稍后再试。");
					}
				}
			}

		});
		_connectThread.start();
	}

	// 通信超时处理
	public void TimeoutReconnect() {
		_tryConnecting = true;
		final ICallback cancelCallBack = new ICallback() {
			@Override
			public void invoke() {
				_tryConnecting = false;
				AlertAndExit();
			}
		};
		OpenLoading("与服务器连接超时，正在重连...", true, cancelCallBack);
		ThreadEx.ThreadCall(new ICallback() {
			@Override
			public void invoke() {
				ThreadEx.sleep(1000);
				post(new ICallback() {
					@Override
					public void invoke() {
						if (_tryConnecting)
							ConnectServer();
					}
				});

			}
		});
	}

	public void SaveLoginInfo() {
		_ac.LoginID = this.tbID.getText().toString();
		_ac.LoginPWD = this.tbPwd.getText().toString();
		_ac.IsRememberPWD = this.cbRPwd.isChecked();
		_ac.Save();
	}

	// 引发通信超时
	@Override
	public void OnClientConnectionTimeout() {
		if (_ac.TimeoutReconnect) {
			TimeoutReconnect();
		} else {
			AlertAndExit("与服务器通信超时，程序将退出！");
		}
	}

	// 界面返回，如果是超时则进行超时处理
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent intent) {

		if (resultCode == TimeoutReconnect) {
			OnClientConnectionTimeout();
		} else {
			super.onActivityResult(requestCode, resultCode, intent);
		}

	}

	// 连接断开处理，如果使用自动重连则不作任何操作
	@Override
	public void OnClientConnectionDisconnected(Exception e) {
		if (!_ac.TimeoutReconnect) {
			super.OnClientConnectionDisconnected(e);
		}
	}

	// 连接断开处理，如果使用自动重连则不作任何操作
	@Override
	public void OnClientConnectionDisconnected() {
		if (!_ac.TimeoutReconnect) {
			super.OnClientConnectionDisconnected();
		}
	}
}
