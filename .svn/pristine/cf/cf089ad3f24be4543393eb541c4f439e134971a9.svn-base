package YangTalkback.Act;

import java.io.File;
import java.net.Socket;

import AXLib.Model.RefObject;
import AXLib.Utility.*;
import AXLib.Utility.Ex.FunEx;
import AXLib.Utility.Ex.StringEx;

import YangTalkback.App.App;
import YangTalkback.App.AppConfig;
import YangTalkback.Base.*;
import YangTalkback.Base.Prompt.PromptButton;
import YangTalkback.Codec.CamVideoCoderProfile;
import YangTalkback.Codec.CamVideoCoderProfile.CameraType;
import YangTalkback.Codec.Cfg.AudioEncodeCfg;
import YangTalkback.Codec.Cfg.VideoEncodeCfg;
import YangTalkback.Comm.ClosureCase;
import YangTalkback.Comm.TalkStatus;
import YangTalkback.Cpt.cptVideoDisplay;
import YangTalkback.Media.MediaCapturer;
import YangTalkback.Media.MediaFrame;
import YangTalkback.Media.MediaFrameFileRead;
import YangTalkback.Media.MediaFrameFileWrite;
import YangTalkback.Media.MediaPlayer;
import YangTalkback.Media.VideoImage;
import YangTalkback.Net.ClientConnection;
import YangTalkback.Protocol.PBCallC;
import android.content.res.Configuration;
import android.os.*;
import android.view.*;
import android.widget.*;

@AutoRefView(id = R.layout.act_play, layout = 0x00)
public class actPlay extends ActCLBase implements SurfaceHolder.Callback {
	
	
	@AutoRefView(id = R.act_play.cbVideo, click = "cbVideo_Click")
	public CheckBox cbVideo;
	@AutoRefView(id = R.act_play.cbAudio, click = "cbAudio_Click")
	public CheckBox cbAudio;

	@AutoRefView(id = R.act_play.btStart, click = "btStart_Click")
	public Button btStart;
	@AutoRefView(id = R.act_play.btStop, click = "btStop_Click")
	public Button btStop;
	@AutoRefView(id = R.act_play.cptVideo)
	public cptVideoDisplay cptVideo = new cptVideoDisplay(null);

	private MediaPlayer _mp = null;
	private MediaFrameFileRead _fr = null;
	private Thread _playThread = null;
	private boolean _playing = false;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
	}

	public void onScreenReady() {
		String sd = Environment.getExternalStorageDirectory().getPath();
		if (!new File(sd + "/AXVChat_Test_Capture.mf").exists()) {
			AlertAndOut("未发现录制文件，请先做录制测试");
			return;
		} else {

		}

	}

	public void PlayThread() {
		String sd = Environment.getExternalStorageDirectory().getPath();
		while (_playing) {
			_fr = new MediaFrameFileRead(sd + "/AXVChat_Test_Capture.mf");
			while (_playing) {
				try {
					MediaFrame mfFrame = _fr.Read();
					if (mfFrame == null)
						break;

					if (mfFrame.nIsAudio == 1) {
						_mp.Received(mfFrame);
					} else {
						_mp.Received(mfFrame);
						ThreadEx.sleep(60);
					}
					Console.d("PlayThread", mfFrame.toString());
				} catch (Exception e) {
					String stack = RuntimeExceptionEx.GetStackTraceString(e);
					Alert("播放出现异常:" + e.toString());
				}
			}
			_fr.Finish();
		}
	}

	public void cbVideo_Click(EventArg<View> arg) {
		_mp.VideoSwitch(cbVideo.isChecked());
	}

	public void cbAudio_Click(EventArg<View> arg) {
		_mp.AudioSwitch(cbAudio.isChecked());
	}

	public void btStart_Click(EventArg<View> arg) {
		if (_playing)
			return;
		_playing = true;
		_mp = new MediaPlayer(cptVideo.Video,_ac.SpeakMode);
		try {
			_mp.IsVideoPlay=cbVideo.isChecked();
			_mp.IsAudioPlay=cbAudio.isChecked();
			_mp.SetPlayMode(false);
			_mp.Error.add(this, "MediaPlay_Error");
			_mp.Start();
		} catch (Exception e) {
			String stack = RuntimeExceptionEx.GetStackTraceString(e);
			Alert("播放出现异常:" + e.toString());
		}
		_playThread = CallByNewThread("PlayThread");

	}

	public void btStop_Click(EventArg<View> arg) {
		if (!_playing)
			return;
		_playing = false;
		ThreadEx.stop(_playThread);
		_mp.Error.remove(this, "MediaPlay_Error");
		_mp.Stop();

	}

	public void MediaPlay_Error(EventArg<Exception> arg) {
		Alert(arg.e.toString());
		btStop_Click(null);
	}
	@Override
	public void onConfigurationChanged(Configuration newConfig) {
		super.onConfigurationChanged(newConfig); // do something
	}
	@Override
	public boolean OnKeyDown_Back() {
		btStop_Click(null);
		return super.OnKeyDown_Back();
	}

	private boolean ExistSDCard() {
		if (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {
			return true;
		} else
			return false;
	}

	@Override
	public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {

	}

	@Override
	public void surfaceCreated(SurfaceHolder holder) {
	}

	@Override
	public void surfaceDestroyed(SurfaceHolder holder) {
	}
}
